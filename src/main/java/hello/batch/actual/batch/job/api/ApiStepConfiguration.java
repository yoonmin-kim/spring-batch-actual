package hello.batch.actual.batch.job.api;import java.lang.reflect.GenericDeclaration;import java.lang.reflect.TypeVariable;import java.util.HashMap;import java.util.Map;import javax.sql.DataSource;import org.springframework.batch.core.Step;import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;import org.springframework.batch.core.configuration.annotation.StepScope;import org.springframework.batch.core.partition.support.Partitioner;import org.springframework.batch.item.ItemReader;import org.springframework.batch.item.database.Order;import org.springframework.batch.item.database.builder.JdbcPagingItemReaderBuilder;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import hello.batch.actual.batch.domain.ProductVO;import hello.batch.actual.batch.partition.ProductPartitioner;import lombok.RequiredArgsConstructor;@RequiredArgsConstructor@Configurationpublic class ApiStepConfiguration {	public static final int CHUNK_SIZE = 10;	private final StepBuilderFactory stepBuilderFactory;	private final DataSource dataSource;	@Bean	public Step apiMasterStep() {		return stepBuilderFactory.get("apiMasterStep")			.partitioner(apiSlaveStep().getName(), partitioner())			.step(apiSlaveStep())			.gridSize(3)			.taskExecutor(taskExecutor())			.build();	}	@Bean	public ProductPartitioner partitioner() {		return new ProductPartitioner(dataSource);	}	@Bean	public Step apiSlaveStep() {		return stepBuilderFactory.get("apiSlaveStep")			.<ProductVO, ProductVO>chunk(CHUNK_SIZE)			.reader(itemReader(null))			.processor(itemProcessor())			.writer(itemWriter())			.build();	}	@Bean	@StepScope	public ItemReader itemReader(@Value("#{stepExecutionContext['product']}") ProductVO productVO) {		Map<String, Order> sortKeys = new HashMap<>();		sortKeys.put("id", Order.DESCENDING);		Map<String, Object> parameters = new HashMap<>();		parameters.put("type", productVO.getType());		return new JdbcPagingItemReaderBuilder<ProductVO>()			.name("jdbcPagingItemReader")			.dataSource(dataSource)			.pageSize(CHUNK_SIZE)			.beanRowMapper(ProductVO.class)			.selectClause("id, name, price, type")			.fromClause("from product")			.whereClause("where type = :type")			.sortKeys(sortKeys)			.parameterValues(parameters)			.build();	}}