package hello.batch.actual.batch.job.api;import java.util.HashMap;import java.util.Map;import javax.sql.DataSource;import org.springframework.batch.core.Step;import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;import org.springframework.batch.core.configuration.annotation.StepScope;import org.springframework.batch.item.ItemProcessor;import org.springframework.batch.item.ItemReader;import org.springframework.batch.item.ItemWriter;import org.springframework.batch.item.database.Order;import org.springframework.batch.item.database.builder.JdbcPagingItemReaderBuilder;import org.springframework.batch.item.support.builder.ClassifierCompositeItemProcessorBuilder;import org.springframework.batch.item.support.builder.ClassifierCompositeItemWriterBuilder;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.core.task.TaskExecutor;import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;import hello.batch.actual.batch.chunk.processor.ApiItemProcessor1;import hello.batch.actual.batch.chunk.processor.ApiItemProcessor2;import hello.batch.actual.batch.chunk.processor.ApiItemProcessor3;import hello.batch.actual.batch.chunk.writer.ApiItemWriter1;import hello.batch.actual.batch.chunk.writer.ApiItemWriter2;import hello.batch.actual.batch.chunk.writer.ApiItemWriter3;import hello.batch.actual.batch.classifier.ProcessorClassifier;import hello.batch.actual.batch.classifier.WriterClassifier;import hello.batch.actual.batch.domain.ApiRequestVO;import hello.batch.actual.batch.domain.ProductVO;import hello.batch.actual.batch.partition.ProductPartitioner;import hello.batch.actual.service.ApiService1;import hello.batch.actual.service.ApiService2;import hello.batch.actual.service.ApiService3;import lombok.RequiredArgsConstructor;@RequiredArgsConstructor@Configurationpublic class ApiStepConfiguration {	public static final int CHUNK_SIZE = 10;	private final StepBuilderFactory stepBuilderFactory;	private final DataSource dataSource;	private final ApiService1 apiService1;	private final ApiService2 apiService2;	private final ApiService3 apiService3;	@Bean	public Step apiMasterStep() {		return stepBuilderFactory.get("apiMasterStep")			.partitioner(apiSlaveStep().getName(), partitioner())			.step(apiSlaveStep())			.gridSize(3)			.taskExecutor(taskExecutor())			.build();	}	@Bean	public TaskExecutor taskExecutor() {		ThreadPoolTaskExecutor taskExecutor = new ThreadPoolTaskExecutor();		taskExecutor.setCorePoolSize(3);		taskExecutor.setMaxPoolSize(6);		taskExecutor.setThreadNamePrefix("api-thread-");		return taskExecutor;	}	@Bean	public ProductPartitioner partitioner() {		return new ProductPartitioner(dataSource);	}	@Bean	public Step apiSlaveStep() {		return stepBuilderFactory.get("apiSlaveStep")			.<ProductVO, ProductVO>chunk(CHUNK_SIZE)			.reader(itemReader(null))			.processor(itemProcessor())			.writer(itemWriter())			.build();	}	@Bean	public ItemProcessor itemProcessor() {		Map<String, ItemProcessor<ProductVO, ApiRequestVO>> processorMap = new HashMap<>();		processorMap.put("1", new ApiItemProcessor1());		processorMap.put("2", new ApiItemProcessor2());		processorMap.put("3", new ApiItemProcessor3());		ProcessorClassifier<ProductVO, ItemProcessor<?, ? extends ApiRequestVO>> processor = new ProcessorClassifier();		processor.setProcessorMap(processorMap);		return new ClassifierCompositeItemProcessorBuilder<ProductVO, ApiRequestVO>()			.classifier(processor)			.build();	}	@Bean	public ItemWriter itemWriter() {		Map<String, ItemWriter<ApiRequestVO>> writerMap = new HashMap<>();		writerMap.put("1", new ApiItemWriter1(apiService1));		writerMap.put("2", new ApiItemWriter2(apiService2));		writerMap.put("3", new ApiItemWriter3(apiService3));		WriterClassifier<ApiRequestVO, ItemWriter<? super ApiRequestVO>> writer = new WriterClassifier<>();		writer.setWriterMap(writerMap);		return new ClassifierCompositeItemWriterBuilder<ApiRequestVO>()			.classifier(writer)			.build();	}	@Bean	@StepScope	public ItemReader itemReader(@Value("#{stepExecutionContext['product']}") ProductVO productVO) {		Map<String, Order> sortKeys = new HashMap<>();		sortKeys.put("id", Order.DESCENDING);		Map<String, Object> parameters = new HashMap<>();		parameters.put("type", productVO.getType());		return new JdbcPagingItemReaderBuilder<ProductVO>()			.name("jdbcPagingItemReader")			.dataSource(dataSource)			.pageSize(CHUNK_SIZE)			.beanRowMapper(ProductVO.class)			.selectClause("id, name, price, type")			.fromClause("from product")			.whereClause("where type = :type")			.sortKeys(sortKeys)			.parameterValues(parameters)			.build();	}}